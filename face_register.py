import cv2
import mediapipe as mp
import numpy as np
import os
import pickle

def main():
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
    script_dir = os.path.dirname(os.path.abspath(__file__))
    # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ face_data –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
    face_data_dir = os.path.join(script_dir, 'face_data')
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists(face_data_dir):
        os.makedirs(face_data_dir)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤: {face_data_dir}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaPipe FaceMesh
    mp_face_mesh = mp.solutions.face_mesh
    face_mesh = mp_face_mesh.FaceMesh(static_image_mode=False, max_num_faces=1, refine_landmarks=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
    cap = cv2.VideoCapture(0)
    
    print("üì∑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ª–∏—Ü–∞: –Ω–∞–∂–º–∏—Ç–µ 's' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–∞, 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
    
    sample_count = 0
    while True:
        ret, frame = cap.read()
        if not ret:
            print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã")
            break
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è MediaPipe
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = face_mesh.process(rgb_frame)
        
        if results.multi_face_landmarks:
            for landmarks in results.multi_face_landmarks:
                # –†–∏—Å—É–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –ª–∏—Ü–µ
                for landmark in landmarks.landmark:
                    x = int(landmark.x * frame.shape[1])
                    y = int(landmark.y * frame.shape[0])
                    cv2.circle(frame, (x, y), 1, (255, 255, 255), -1)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤
        cv2.putText(frame, 
                   f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {sample_count}", 
                   (10, 30), 
                   cv2.FONT_HERSHEY_SIMPLEX, 
                   1, 
                   (255, 255, 255), 
                   2)
        
        cv2.imshow('Face Registration', frame)
        
        key = cv2.waitKey(1) & 0xFF
        if key == ord('s'):
            if results.multi_face_landmarks:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏—Ü–∞
                face_data = []
                for landmark in results.multi_face_landmarks[0].landmark:
                    face_data.append([landmark.x, landmark.y, landmark.z])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–æ–º –æ–±—Ä–∞–∑—Ü–∞
                sample_count += 1
                file_name = f"{name}_{sample_count}.pkl"
                file_path = os.path.join(face_data_dir, file_name)
                with open(file_path, 'wb') as f:
                    pickle.dump(face_data, f)
                print(f"‚úÖ –û–±—Ä–∞–∑–µ—Ü {sample_count} –¥–ª—è {name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {file_path}")
            else:
                print("‚ùå –õ–∏—Ü–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
        elif key == ord('q'):
            if sample_count > 0:
                print(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {sample_count} –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ {face_data_dir}")
            else:
                print("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            break
    
    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    cap.release()
    cv2.destroyAllWindows()
    face_mesh.close()

if __name__ == "__main__":
    main()
